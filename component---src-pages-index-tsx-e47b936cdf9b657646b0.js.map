{"version":3,"file":"component---src-pages-index-tsx-e47b936cdf9b657646b0.js","mappings":"4OAEO,IAAMA,EAAW,CAAH,imBCCRC,GAAkB,YAAH,oBAAG,CAC3BD,EADwB,uTCAfE,GAAkB,YAAH,oBAAG,CAC3BF,EADwB,6J,UCU5B,IAAMG,EAAa,CACjBC,KAAMH,EACNI,KAAMH,GAGFI,GAAY,aAAH,oBAAG,CAAH,4DAKTC,GAAkB,YAAH,oBAAG,CAAH,0CAIRC,EAA4B,SAAC,GAAgB,IAAdC,EAAc,EAAdA,QACpCC,EAAQD,EAAQE,YAAYD,OAASD,EAAQG,OAAOC,KACpDC,EAAOL,EAAQE,YAAYG,MAAQ,OACnCC,EAAQN,EAAQE,YAAYI,MAC5BC,EAAaP,EAAQE,YAAYM,YACjCC,EAAcf,EAAWW,GAGXK,EAAAA,SAAc,WAChC,IAAMC,EAASX,EAAQE,YAAYS,QAAU,CAACX,EAAQE,YAAYI,OAC5DM,EAAaC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAIrD,OAHoBhB,EAAQE,YAAYS,OACpCX,EAAQE,YAAYS,OAAOC,GAC3BZ,EAAQE,YAAYI,QAEvB,CAACN,IAEJ,OACE,QAACS,EAAD,CAAaQ,OAAO,SAASC,KAAMlB,EAAQE,YAAYiB,OACrD,eAAKC,UAAU,eACb,wBAKE,eAAKC,IAAKf,EAAMgB,YAAaf,MAAAA,OAAnB,EAAmBA,EAAYe,WAAWC,IAAI,eAG5D,mBACEH,UAAU,eACVI,WAAS,EACTC,SAAS,8BAET,uBACE,QAAC5B,EAAD,KACGG,EAAQE,YAAYiB,MACnB,gBAAMO,SAAS,YAAYzB,IAE3B,QAAC,EAAA0B,KAAD,CAAMC,GAAI5B,EAAQG,OAAOC,KAAMsB,SAAS,QACtC,gBAAMA,SAAS,YAAYzB,OAKnC,wBACE,QAACH,EAAD,CACE+B,wBAAyB,CACvBC,OAAQ9B,EAAQE,YAAY6B,aAAe/B,EAAQgC,SAErDN,SAAS,oBC1Ed,IAAMO,GAAY,aAAH,oBAAG,CAAH,iMC8BtB,EAhBuD,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxDC,EAAQF,EAAKG,kBAAkBC,MAErC,OACE,QAACC,EAAA,EAAD,CAAYJ,SAAUA,IACpB,QAAC,IAAD,CAAKlC,MAAM,uBACX,QAACuC,EAAA,EAAD,OACA,QAACP,EAAD,KACGG,EAAMK,KAAI,SAAAC,GAAI,OACb,QAAC3C,EAAD,CAAM4C,IAAKD,EAAKvC,OAAOC,KAAMJ,QAAS0C","sources":["webpack://gatsby-starter-blog/./src/components/Tiles/TileBase.ts","webpack://gatsby-starter-blog/./src/components/Tiles/TileFull.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/TileHalf.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/Tile.tsx","webpack://gatsby-starter-blog/./src/components/Tiles/TilesGrid.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\"\n\nexport const TileBase = css`\n  border-radius: 18px;\n  overflow: hidden;\n  transition-duration: 300ms;\n\n  .tile-image {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    img,\n    picture {\n      font-size: 0;\n      max-width: 100%;\n      max-height: 100%;\n    }\n  }\n\n  background-color: hsla(0, 0%, 100%, 0.02);\n\n  &:hover {\n    background-color: hsla(0, 0%, 100%, 0.03);\n  }\n\n  /* @media (prefers-color-scheme: light) {\n    border: 1px solid hsla(0, 0%, 0%, 0.02);\n    background-color: hsla(0, 0%, 100%, 0.2);\n\n    &:hover {\n      border: 1px solid hsla(0, 0%, 0%, 0.03);\n      background-color: hsla(0, 0%, 100%, 0.3);\n    }\n  } */\n\n  @media screen and (max-width: 720px) {\n    grid-column: span 12;\n  }\n`\n","import styled from \"@emotion/styled\"\nimport { TileBase } from \"./TileBase\"\n\nexport const TileFullWrapper = styled.a`\n  ${TileBase}\n\n  display: flex;\n  flex-direction: row;\n  grid-column: span 8;\n\n  @media screen and (max-width: 400px) {\n    flex-direction: column;\n  }\n\n  .tile-details {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 30px 30px 30px 0px;\n  }\n\n  @media screen and (max-width: 720px) {\n    flex-direction: column;\n\n    .tile-details {\n      padding: 30px;\n    }\n  }\n`\n","import styled from \"@emotion/styled\"\nimport { TileBase } from \"./TileBase\"\n\nexport const TileHalfWrapper = styled.a`\n  ${TileBase}\n\n  display: flex;\n  flex-direction: column;\n  grid-column: span 4;\n\n  .tile-details {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    justify-content: center;\n    padding: 24px 30px;\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"@emotion/styled\"\n\nimport { Project } from \"../../types\"\n\nimport { TileFullWrapper } from \"./TileFull\"\nimport { TileHalfWrapper } from \"./TileHalf\"\n\nexport type TileProps = {\n  project: Project\n}\n\nconst tileBySize = {\n  full: TileFullWrapper,\n  half: TileHalfWrapper,\n}\n\nconst TileTitle = styled.h2`\n  margin-bottom: 8px;\n  font-size: 20px;\n`\n\nconst TileDescription = styled.p`\n  font-size: 15px;\n`\n\nexport const Tile: React.FC<TileProps> = ({ project }) => {\n  const title = project.frontmatter.title || project.fields.slug\n  const size = project.frontmatter.size || \"full\"\n  const image = project.frontmatter.image\n  const imageLight = project.frontmatter.image_light\n  const TileWrapper = tileBySize[size]\n\n  // eslint-disable-next-line\n  const randomImage = React.useMemo(() => {\n    const images = project.frontmatter.images || [project.frontmatter.image]\n    const imageIndex = Math.floor(Math.random() * images.length)\n    const randomImage = project.frontmatter.images\n      ? project.frontmatter.images[imageIndex]\n      : project.frontmatter.image\n    return randomImage\n  }, [project])\n\n  return (\n    <TileWrapper target=\"_blank\" href={project.frontmatter.link}>\n      <div className=\"tile-image\">\n        <picture>\n          {/* <source\n            srcSet={image.publicURL}\n            media=\"(prefers-color-scheme: light)\"\n          /> */}\n          <img src={image.publicURL || imageLight?.publicURL} alt=\"project\" />\n        </picture>\n      </div>\n      <article\n        className=\"tile-details\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <TileTitle>\n            {project.frontmatter.link ? (\n              <span itemProp=\"headline\">{title}</span>\n            ) : (\n              <Link to={project.fields.slug} itemProp=\"url\">\n                <span itemProp=\"headline\">{title}</span>\n              </Link>\n            )}\n          </TileTitle>\n        </header>\n        <section>\n          <TileDescription\n            dangerouslySetInnerHTML={{\n              __html: project.frontmatter.description || project.excerpt,\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n      </article>\n    </TileWrapper>\n  )\n}\n","import styled from \"@emotion/styled\"\n\nexport const TilesGrid = styled.ol`\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  grid-column-gap: 24px;\n  grid-row-gap: 24px;\n  padding: 0 24px;\n  display: grid;\n  grid-template-columns: repeat(12, minmax(0, 1fr));\n`\n","import * as React from \"react\"\nimport { graphql, PageProps } from \"gatsby\"\n\nimport { Bio } from \"../components/Bio\"\nimport { PageLayout } from \"../components/PageLayout\"\nimport Seo from \"../components/seo\"\n\nimport { Tile, TilesGrid } from \"../components/Tiles\"\nimport { Project } from \"../types\"\n\nexport type BlogIndexProps = {\n  allMarkdownRemark: {\n    nodes: Project[]\n  }\n}\n\nconst BlogIndex: React.FC<PageProps<BlogIndexProps>> = ({ data, location }) => {\n  const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <PageLayout location={location}>\n      <Seo title=\"gebeto | projects\" />\n      <Bio />\n      <TilesGrid>\n        {posts.map(post => (\n          <Tile key={post.fields.slug} project={post} />\n        ))}\n      </TilesGrid>\n    </PageLayout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___order], order: ASC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          link\n          size\n          image {\n            publicURL\n          }\n          image_light {\n            publicURL\n          }\n          images {\n            publicURL\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["TileBase","TileFullWrapper","TileHalfWrapper","tileBySize","full","half","TileTitle","TileDescription","Tile","project","title","frontmatter","fields","slug","size","image","imageLight","image_light","TileWrapper","React","images","imageIndex","Math","floor","random","length","target","href","link","className","src","publicURL","alt","itemScope","itemType","itemProp","Link","to","dangerouslySetInnerHTML","__html","description","excerpt","TilesGrid","data","location","posts","allMarkdownRemark","nodes","PageLayout","Bio","map","post","key"],"sourceRoot":""}